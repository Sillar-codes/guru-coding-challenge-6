service: crud-api

# Remove all plugins initially to test

provider:
  name: aws
  runtime: nodejs18.x
  region: us-west-1
  stage: ${opt:stage, 'dev'}
  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    TABLE_NAME: ${self:custom.tableName}
    USER_POOL_ID: { Ref: CognitoUserPool }
    USER_POOL_CLIENT_ID: { Ref: CognitoUserPoolClient }
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ItemsTable, Arn]
            - Fn::Join:
                - ""
                - - Fn::GetAtt: [ItemsTable, Arn]
                  - "/index/*"
        - Effect: Allow
          Action:
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
            - cognito-idp:AdminDeleteUser
            - cognito-idp:AdminGetUser
            - cognito-idp:GetUser
          Resource:
            - Fn::GetAtt: [CognitoUserPool, Arn]

custom:
  tableName: items-table-${self:provider.stage}

package:
  individually: false
  patterns:
    - "!node_modules/**"
    - "dist/**"
    - "!src/**"
    - "!*.ts"
    - "!tsconfig.json"
    - "!package-lock.json"
    - "!yarn.lock"

resources:
  Resources:
    ItemsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: itemId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: itemId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: userId-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: crud-user-pool-${self:provider.stage}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireUppercase: true
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
        Schema:
          - Name: email
            Required: true
            Mutable: true
          - Name: name
            Required: true
            Mutable: true

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: { Ref: CognitoUserPool }
        ClientName: crud-app-client-${self:provider.stage}
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
          - USER_PASSWORD_AUTH
        GenerateSecret: false

    GatewayResponseDefault4XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: "ApiGatewayRestApi"

    GatewayResponseDefault5XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: "ApiGatewayRestApi"

  Outputs:
    UserPoolId:
      Value: { Ref: CognitoUserPool }
    UserPoolClientId:
      Value: { Ref: CognitoUserPoolClient }
    ServiceEndpoint:
      Description: "API Gateway endpoint URL"
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}"

functions:
  signUp:
    handler: src/handlers/auth/signUp.handler
    events:
      - http:
          path: auth/signup
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

  signIn:
    handler: src/handlers/auth/signIn.handler
    events:
      - http:
          path: auth/signin
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

  getCurrentUser:
    handler: src/handlers/auth/getCurrentUser.handler
    events:
      - http:
          path: auth/me
          method: get
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

  createItem:
    handler: src/handlers/items/create.handler
    events:
      - http:
          path: items
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

  getItem:
    handler: src/handlers/items/get.handler
    events:
      - http:
          path: items/{id}
          method: get
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

  listItems:
    handler: src/handlers/items/list.handler
    events:
      - http:
          path: items
          method: get
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

  updateItem:
    handler: src/handlers/items/update.handler
    events:
      - http:
          path: items/{id}
          method: put
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

  deleteItem:
    handler: src/handlers/items/delete.handler
    events:
      - http:
          path: items/{id}
          method: delete
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

  authorizer:
    handler: dist/handlers/auth/authorizer.handler
